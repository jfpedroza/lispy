def {fun} (\ {args body} {def (head args) (\ (tail args) body)})
fun {unpack f xs} {eval (cons f xs)}
fun {pack f & xs} {f xs}
def {uncurry} pack
def {curry} unpack
fun {fst xs} {eval (head xs)}
fun {snd xs} {fst (tail xs)}
fun {flip f x y & xs} {unpack f (join {y x} xs)}
fun {comp f g x & xs} {f (unpack g (cons x xs))}
def {sum} (unpack +)
def {product} (unpack *)
fun {reverse l} { if (== l {}) {{}} {join (reverse (tail l)) (head l)} }
fun {nth n l} { if (== n 0) {fst l} {nth (- n 1) (tail l)} }
fun {member e l} { if (== l {}) {false} { if (== e (fst l)) {true} { member e (tail l) } } }
fun {last l} { if (== (tail l) {}) {fst l} { last (tail l) } }
fun {and x y} { if x {y} {false} }
fun {or x y} { if x {true} {y} }
fun {not x} { == x false }
fun {take n l} { if (== l {}) {{}} { if (== n 0) {{}} { join (head l) (take (- n 1) (tail l)) } } }
fun {drop n l} { if (== l {}) {{}} { if (== n 0) {l} { drop (- n 1) (tail l) } } }
fun {map f l} { if (== l {}) {{}} { cons (f (fst l)) (map f (tail l)) } }
fun {filter p l} { if (== l {}) {{}} { if (p (fst l)) { cons (fst l) (filter p (tail l)) } {filter p (tail l)} } }
fun {eq x y} {== x y}
fun {ne x y} {!= x y}
fun {gt x y} {> x y}
fun {lt x y} {< x y}
fun {ge x y} {>= x y}
fun {le x y} {<= x y}
fun {even n} {== (% n 2) 0}
fun {odd n} {not (even n)}
